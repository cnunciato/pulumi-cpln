// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cpln

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln/internal"
)

type Identity struct {
	pulumi.CustomResourceState

	AwsAccessPolicy        IdentityAwsAccessPolicyPtrOutput         `pulumi:"awsAccessPolicy"`
	AzureAccessPolicy      IdentityAzureAccessPolicyPtrOutput       `pulumi:"azureAccessPolicy"`
	CplnId                 pulumi.StringOutput                      `pulumi:"cplnId"`
	Description            pulumi.StringPtrOutput                   `pulumi:"description"`
	GcpAccessPolicy        IdentityGcpAccessPolicyPtrOutput         `pulumi:"gcpAccessPolicy"`
	Gvc                    pulumi.StringOutput                      `pulumi:"gvc"`
	Name                   pulumi.StringOutput                      `pulumi:"name"`
	NativeNetworkResources IdentityNativeNetworkResourceArrayOutput `pulumi:"nativeNetworkResources"`
	NetworkResources       IdentityNetworkResourceArrayOutput       `pulumi:"networkResources"`
	NgsAccessPolicy        IdentityNgsAccessPolicyPtrOutput         `pulumi:"ngsAccessPolicy"`
	SelfLink               pulumi.StringOutput                      `pulumi:"selfLink"`
	Status                 pulumi.StringMapOutput                   `pulumi:"status"`
	Tags                   pulumi.StringMapOutput                   `pulumi:"tags"`
}

// NewIdentity registers a new resource with the given unique name, arguments, and options.
func NewIdentity(ctx *pulumi.Context,
	name string, args *IdentityArgs, opts ...pulumi.ResourceOption) (*Identity, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Gvc == nil {
		return nil, errors.New("invalid value for required argument 'Gvc'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Identity
	err := ctx.RegisterResource("cpln:index/identity:Identity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentity gets an existing Identity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityState, opts ...pulumi.ResourceOption) (*Identity, error) {
	var resource Identity
	err := ctx.ReadResource("cpln:index/identity:Identity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Identity resources.
type identityState struct {
	AwsAccessPolicy        *IdentityAwsAccessPolicy        `pulumi:"awsAccessPolicy"`
	AzureAccessPolicy      *IdentityAzureAccessPolicy      `pulumi:"azureAccessPolicy"`
	CplnId                 *string                         `pulumi:"cplnId"`
	Description            *string                         `pulumi:"description"`
	GcpAccessPolicy        *IdentityGcpAccessPolicy        `pulumi:"gcpAccessPolicy"`
	Gvc                    *string                         `pulumi:"gvc"`
	Name                   *string                         `pulumi:"name"`
	NativeNetworkResources []IdentityNativeNetworkResource `pulumi:"nativeNetworkResources"`
	NetworkResources       []IdentityNetworkResource       `pulumi:"networkResources"`
	NgsAccessPolicy        *IdentityNgsAccessPolicy        `pulumi:"ngsAccessPolicy"`
	SelfLink               *string                         `pulumi:"selfLink"`
	Status                 map[string]string               `pulumi:"status"`
	Tags                   map[string]string               `pulumi:"tags"`
}

type IdentityState struct {
	AwsAccessPolicy        IdentityAwsAccessPolicyPtrInput
	AzureAccessPolicy      IdentityAzureAccessPolicyPtrInput
	CplnId                 pulumi.StringPtrInput
	Description            pulumi.StringPtrInput
	GcpAccessPolicy        IdentityGcpAccessPolicyPtrInput
	Gvc                    pulumi.StringPtrInput
	Name                   pulumi.StringPtrInput
	NativeNetworkResources IdentityNativeNetworkResourceArrayInput
	NetworkResources       IdentityNetworkResourceArrayInput
	NgsAccessPolicy        IdentityNgsAccessPolicyPtrInput
	SelfLink               pulumi.StringPtrInput
	Status                 pulumi.StringMapInput
	Tags                   pulumi.StringMapInput
}

func (IdentityState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityState)(nil)).Elem()
}

type identityArgs struct {
	AwsAccessPolicy        *IdentityAwsAccessPolicy        `pulumi:"awsAccessPolicy"`
	AzureAccessPolicy      *IdentityAzureAccessPolicy      `pulumi:"azureAccessPolicy"`
	Description            *string                         `pulumi:"description"`
	GcpAccessPolicy        *IdentityGcpAccessPolicy        `pulumi:"gcpAccessPolicy"`
	Gvc                    string                          `pulumi:"gvc"`
	Name                   *string                         `pulumi:"name"`
	NativeNetworkResources []IdentityNativeNetworkResource `pulumi:"nativeNetworkResources"`
	NetworkResources       []IdentityNetworkResource       `pulumi:"networkResources"`
	NgsAccessPolicy        *IdentityNgsAccessPolicy        `pulumi:"ngsAccessPolicy"`
	Tags                   map[string]string               `pulumi:"tags"`
}

// The set of arguments for constructing a Identity resource.
type IdentityArgs struct {
	AwsAccessPolicy        IdentityAwsAccessPolicyPtrInput
	AzureAccessPolicy      IdentityAzureAccessPolicyPtrInput
	Description            pulumi.StringPtrInput
	GcpAccessPolicy        IdentityGcpAccessPolicyPtrInput
	Gvc                    pulumi.StringInput
	Name                   pulumi.StringPtrInput
	NativeNetworkResources IdentityNativeNetworkResourceArrayInput
	NetworkResources       IdentityNetworkResourceArrayInput
	NgsAccessPolicy        IdentityNgsAccessPolicyPtrInput
	Tags                   pulumi.StringMapInput
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityArgs)(nil)).Elem()
}

type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(ctx context.Context) IdentityOutput
}

func (*Identity) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (i *Identity) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i *Identity) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

func (i *Identity) ToOutput(ctx context.Context) pulumix.Output[*Identity] {
	return pulumix.Output[*Identity]{
		OutputState: i.ToIdentityOutputWithContext(ctx).OutputState,
	}
}

// IdentityArrayInput is an input type that accepts IdentityArray and IdentityArrayOutput values.
// You can construct a concrete instance of `IdentityArrayInput` via:
//
//	IdentityArray{ IdentityArgs{...} }
type IdentityArrayInput interface {
	pulumi.Input

	ToIdentityArrayOutput() IdentityArrayOutput
	ToIdentityArrayOutputWithContext(context.Context) IdentityArrayOutput
}

type IdentityArray []IdentityInput

func (IdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Identity)(nil)).Elem()
}

func (i IdentityArray) ToIdentityArrayOutput() IdentityArrayOutput {
	return i.ToIdentityArrayOutputWithContext(context.Background())
}

func (i IdentityArray) ToIdentityArrayOutputWithContext(ctx context.Context) IdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityArrayOutput)
}

func (i IdentityArray) ToOutput(ctx context.Context) pulumix.Output[[]*Identity] {
	return pulumix.Output[[]*Identity]{
		OutputState: i.ToIdentityArrayOutputWithContext(ctx).OutputState,
	}
}

// IdentityMapInput is an input type that accepts IdentityMap and IdentityMapOutput values.
// You can construct a concrete instance of `IdentityMapInput` via:
//
//	IdentityMap{ "key": IdentityArgs{...} }
type IdentityMapInput interface {
	pulumi.Input

	ToIdentityMapOutput() IdentityMapOutput
	ToIdentityMapOutputWithContext(context.Context) IdentityMapOutput
}

type IdentityMap map[string]IdentityInput

func (IdentityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Identity)(nil)).Elem()
}

func (i IdentityMap) ToIdentityMapOutput() IdentityMapOutput {
	return i.ToIdentityMapOutputWithContext(context.Background())
}

func (i IdentityMap) ToIdentityMapOutputWithContext(ctx context.Context) IdentityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityMapOutput)
}

func (i IdentityMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Identity] {
	return pulumix.Output[map[string]*Identity]{
		OutputState: i.ToIdentityMapOutputWithContext(ctx).OutputState,
	}
}

type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

func (o IdentityOutput) ToOutput(ctx context.Context) pulumix.Output[*Identity] {
	return pulumix.Output[*Identity]{
		OutputState: o.OutputState,
	}
}

func (o IdentityOutput) AwsAccessPolicy() IdentityAwsAccessPolicyPtrOutput {
	return o.ApplyT(func(v *Identity) IdentityAwsAccessPolicyPtrOutput { return v.AwsAccessPolicy }).(IdentityAwsAccessPolicyPtrOutput)
}

func (o IdentityOutput) AzureAccessPolicy() IdentityAzureAccessPolicyPtrOutput {
	return o.ApplyT(func(v *Identity) IdentityAzureAccessPolicyPtrOutput { return v.AzureAccessPolicy }).(IdentityAzureAccessPolicyPtrOutput)
}

func (o IdentityOutput) CplnId() pulumi.StringOutput {
	return o.ApplyT(func(v *Identity) pulumi.StringOutput { return v.CplnId }).(pulumi.StringOutput)
}

func (o IdentityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Identity) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o IdentityOutput) GcpAccessPolicy() IdentityGcpAccessPolicyPtrOutput {
	return o.ApplyT(func(v *Identity) IdentityGcpAccessPolicyPtrOutput { return v.GcpAccessPolicy }).(IdentityGcpAccessPolicyPtrOutput)
}

func (o IdentityOutput) Gvc() pulumi.StringOutput {
	return o.ApplyT(func(v *Identity) pulumi.StringOutput { return v.Gvc }).(pulumi.StringOutput)
}

func (o IdentityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Identity) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o IdentityOutput) NativeNetworkResources() IdentityNativeNetworkResourceArrayOutput {
	return o.ApplyT(func(v *Identity) IdentityNativeNetworkResourceArrayOutput { return v.NativeNetworkResources }).(IdentityNativeNetworkResourceArrayOutput)
}

func (o IdentityOutput) NetworkResources() IdentityNetworkResourceArrayOutput {
	return o.ApplyT(func(v *Identity) IdentityNetworkResourceArrayOutput { return v.NetworkResources }).(IdentityNetworkResourceArrayOutput)
}

func (o IdentityOutput) NgsAccessPolicy() IdentityNgsAccessPolicyPtrOutput {
	return o.ApplyT(func(v *Identity) IdentityNgsAccessPolicyPtrOutput { return v.NgsAccessPolicy }).(IdentityNgsAccessPolicyPtrOutput)
}

func (o IdentityOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Identity) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

func (o IdentityOutput) Status() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Identity) pulumi.StringMapOutput { return v.Status }).(pulumi.StringMapOutput)
}

func (o IdentityOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Identity) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type IdentityArrayOutput struct{ *pulumi.OutputState }

func (IdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Identity)(nil)).Elem()
}

func (o IdentityArrayOutput) ToIdentityArrayOutput() IdentityArrayOutput {
	return o
}

func (o IdentityArrayOutput) ToIdentityArrayOutputWithContext(ctx context.Context) IdentityArrayOutput {
	return o
}

func (o IdentityArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Identity] {
	return pulumix.Output[[]*Identity]{
		OutputState: o.OutputState,
	}
}

func (o IdentityArrayOutput) Index(i pulumi.IntInput) IdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Identity {
		return vs[0].([]*Identity)[vs[1].(int)]
	}).(IdentityOutput)
}

type IdentityMapOutput struct{ *pulumi.OutputState }

func (IdentityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Identity)(nil)).Elem()
}

func (o IdentityMapOutput) ToIdentityMapOutput() IdentityMapOutput {
	return o
}

func (o IdentityMapOutput) ToIdentityMapOutputWithContext(ctx context.Context) IdentityMapOutput {
	return o
}

func (o IdentityMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Identity] {
	return pulumix.Output[map[string]*Identity]{
		OutputState: o.OutputState,
	}
}

func (o IdentityMapOutput) MapIndex(k pulumi.StringInput) IdentityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Identity {
		return vs[0].(map[string]*Identity)[vs[1].(string)]
	}).(IdentityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityInput)(nil)).Elem(), &Identity{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityArrayInput)(nil)).Elem(), IdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityMapInput)(nil)).Elem(), IdentityMap{})
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityArrayOutput{})
	pulumi.RegisterOutputType(IdentityMapOutput{})
}
