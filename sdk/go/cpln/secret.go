// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cpln

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln/internal"
)

type Secret struct {
	pulumi.CustomResourceState

	Aws              SecretAwsPtrOutput            `pulumi:"aws"`
	AzureConnector   SecretAzureConnectorPtrOutput `pulumi:"azureConnector"`
	AzureSdk         pulumi.StringPtrOutput        `pulumi:"azureSdk"`
	CplnId           pulumi.StringOutput           `pulumi:"cplnId"`
	Description      pulumi.StringPtrOutput        `pulumi:"description"`
	Dictionary       pulumi.StringMapOutput        `pulumi:"dictionary"`
	DictionaryAsEnvs pulumi.MapOutput              `pulumi:"dictionaryAsEnvs"`
	Docker           pulumi.StringPtrOutput        `pulumi:"docker"`
	Ecr              SecretEcrPtrOutput            `pulumi:"ecr"`
	Gcp              pulumi.StringPtrOutput        `pulumi:"gcp"`
	Keypair          SecretKeypairPtrOutput        `pulumi:"keypair"`
	Name             pulumi.StringOutput           `pulumi:"name"`
	NatsAccount      SecretNatsAccountPtrOutput    `pulumi:"natsAccount"`
	Opaque           SecretOpaquePtrOutput         `pulumi:"opaque"`
	SelfLink         pulumi.StringOutput           `pulumi:"selfLink"`
	Tags             pulumi.StringMapOutput        `pulumi:"tags"`
	Tls              SecretTlsPtrOutput            `pulumi:"tls"`
	Userpass         SecretUserpassPtrOutput       `pulumi:"userpass"`
}

// NewSecret registers a new resource with the given unique name, arguments, and options.
func NewSecret(ctx *pulumi.Context,
	name string, args *SecretArgs, opts ...pulumi.ResourceOption) (*Secret, error) {
	if args == nil {
		args = &SecretArgs{}
	}

	if args.AzureSdk != nil {
		args.AzureSdk = pulumi.ToSecret(args.AzureSdk).(pulumi.StringPtrInput)
	}
	if args.Docker != nil {
		args.Docker = pulumi.ToSecret(args.Docker).(pulumi.StringPtrInput)
	}
	if args.Gcp != nil {
		args.Gcp = pulumi.ToSecret(args.Gcp).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"azureSdk",
		"docker",
		"gcp",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Secret
	err := ctx.RegisterResource("cpln:index/secret:Secret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecret gets an existing Secret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretState, opts ...pulumi.ResourceOption) (*Secret, error) {
	var resource Secret
	err := ctx.ReadResource("cpln:index/secret:Secret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Secret resources.
type secretState struct {
	Aws              *SecretAws             `pulumi:"aws"`
	AzureConnector   *SecretAzureConnector  `pulumi:"azureConnector"`
	AzureSdk         *string                `pulumi:"azureSdk"`
	CplnId           *string                `pulumi:"cplnId"`
	Description      *string                `pulumi:"description"`
	Dictionary       map[string]string      `pulumi:"dictionary"`
	DictionaryAsEnvs map[string]interface{} `pulumi:"dictionaryAsEnvs"`
	Docker           *string                `pulumi:"docker"`
	Ecr              *SecretEcr             `pulumi:"ecr"`
	Gcp              *string                `pulumi:"gcp"`
	Keypair          *SecretKeypair         `pulumi:"keypair"`
	Name             *string                `pulumi:"name"`
	NatsAccount      *SecretNatsAccount     `pulumi:"natsAccount"`
	Opaque           *SecretOpaque          `pulumi:"opaque"`
	SelfLink         *string                `pulumi:"selfLink"`
	Tags             map[string]string      `pulumi:"tags"`
	Tls              *SecretTls             `pulumi:"tls"`
	Userpass         *SecretUserpass        `pulumi:"userpass"`
}

type SecretState struct {
	Aws              SecretAwsPtrInput
	AzureConnector   SecretAzureConnectorPtrInput
	AzureSdk         pulumi.StringPtrInput
	CplnId           pulumi.StringPtrInput
	Description      pulumi.StringPtrInput
	Dictionary       pulumi.StringMapInput
	DictionaryAsEnvs pulumi.MapInput
	Docker           pulumi.StringPtrInput
	Ecr              SecretEcrPtrInput
	Gcp              pulumi.StringPtrInput
	Keypair          SecretKeypairPtrInput
	Name             pulumi.StringPtrInput
	NatsAccount      SecretNatsAccountPtrInput
	Opaque           SecretOpaquePtrInput
	SelfLink         pulumi.StringPtrInput
	Tags             pulumi.StringMapInput
	Tls              SecretTlsPtrInput
	Userpass         SecretUserpassPtrInput
}

func (SecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretState)(nil)).Elem()
}

type secretArgs struct {
	Aws            *SecretAws            `pulumi:"aws"`
	AzureConnector *SecretAzureConnector `pulumi:"azureConnector"`
	AzureSdk       *string               `pulumi:"azureSdk"`
	Description    *string               `pulumi:"description"`
	Dictionary     map[string]string     `pulumi:"dictionary"`
	Docker         *string               `pulumi:"docker"`
	Ecr            *SecretEcr            `pulumi:"ecr"`
	Gcp            *string               `pulumi:"gcp"`
	Keypair        *SecretKeypair        `pulumi:"keypair"`
	Name           *string               `pulumi:"name"`
	NatsAccount    *SecretNatsAccount    `pulumi:"natsAccount"`
	Opaque         *SecretOpaque         `pulumi:"opaque"`
	Tags           map[string]string     `pulumi:"tags"`
	Tls            *SecretTls            `pulumi:"tls"`
	Userpass       *SecretUserpass       `pulumi:"userpass"`
}

// The set of arguments for constructing a Secret resource.
type SecretArgs struct {
	Aws            SecretAwsPtrInput
	AzureConnector SecretAzureConnectorPtrInput
	AzureSdk       pulumi.StringPtrInput
	Description    pulumi.StringPtrInput
	Dictionary     pulumi.StringMapInput
	Docker         pulumi.StringPtrInput
	Ecr            SecretEcrPtrInput
	Gcp            pulumi.StringPtrInput
	Keypair        SecretKeypairPtrInput
	Name           pulumi.StringPtrInput
	NatsAccount    SecretNatsAccountPtrInput
	Opaque         SecretOpaquePtrInput
	Tags           pulumi.StringMapInput
	Tls            SecretTlsPtrInput
	Userpass       SecretUserpassPtrInput
}

func (SecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretArgs)(nil)).Elem()
}

type SecretInput interface {
	pulumi.Input

	ToSecretOutput() SecretOutput
	ToSecretOutputWithContext(ctx context.Context) SecretOutput
}

func (*Secret) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (i *Secret) ToSecretOutput() SecretOutput {
	return i.ToSecretOutputWithContext(context.Background())
}

func (i *Secret) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput)
}

func (i *Secret) ToOutput(ctx context.Context) pulumix.Output[*Secret] {
	return pulumix.Output[*Secret]{
		OutputState: i.ToSecretOutputWithContext(ctx).OutputState,
	}
}

// SecretArrayInput is an input type that accepts SecretArray and SecretArrayOutput values.
// You can construct a concrete instance of `SecretArrayInput` via:
//
//	SecretArray{ SecretArgs{...} }
type SecretArrayInput interface {
	pulumi.Input

	ToSecretArrayOutput() SecretArrayOutput
	ToSecretArrayOutputWithContext(context.Context) SecretArrayOutput
}

type SecretArray []SecretInput

func (SecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Secret)(nil)).Elem()
}

func (i SecretArray) ToSecretArrayOutput() SecretArrayOutput {
	return i.ToSecretArrayOutputWithContext(context.Background())
}

func (i SecretArray) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretArrayOutput)
}

func (i SecretArray) ToOutput(ctx context.Context) pulumix.Output[[]*Secret] {
	return pulumix.Output[[]*Secret]{
		OutputState: i.ToSecretArrayOutputWithContext(ctx).OutputState,
	}
}

// SecretMapInput is an input type that accepts SecretMap and SecretMapOutput values.
// You can construct a concrete instance of `SecretMapInput` via:
//
//	SecretMap{ "key": SecretArgs{...} }
type SecretMapInput interface {
	pulumi.Input

	ToSecretMapOutput() SecretMapOutput
	ToSecretMapOutputWithContext(context.Context) SecretMapOutput
}

type SecretMap map[string]SecretInput

func (SecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Secret)(nil)).Elem()
}

func (i SecretMap) ToSecretMapOutput() SecretMapOutput {
	return i.ToSecretMapOutputWithContext(context.Background())
}

func (i SecretMap) ToSecretMapOutputWithContext(ctx context.Context) SecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretMapOutput)
}

func (i SecretMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Secret] {
	return pulumix.Output[map[string]*Secret]{
		OutputState: i.ToSecretMapOutputWithContext(ctx).OutputState,
	}
}

type SecretOutput struct{ *pulumi.OutputState }

func (SecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (o SecretOutput) ToSecretOutput() SecretOutput {
	return o
}

func (o SecretOutput) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return o
}

func (o SecretOutput) ToOutput(ctx context.Context) pulumix.Output[*Secret] {
	return pulumix.Output[*Secret]{
		OutputState: o.OutputState,
	}
}

func (o SecretOutput) Aws() SecretAwsPtrOutput {
	return o.ApplyT(func(v *Secret) SecretAwsPtrOutput { return v.Aws }).(SecretAwsPtrOutput)
}

func (o SecretOutput) AzureConnector() SecretAzureConnectorPtrOutput {
	return o.ApplyT(func(v *Secret) SecretAzureConnectorPtrOutput { return v.AzureConnector }).(SecretAzureConnectorPtrOutput)
}

func (o SecretOutput) AzureSdk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringPtrOutput { return v.AzureSdk }).(pulumi.StringPtrOutput)
}

func (o SecretOutput) CplnId() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.CplnId }).(pulumi.StringOutput)
}

func (o SecretOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SecretOutput) Dictionary() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringMapOutput { return v.Dictionary }).(pulumi.StringMapOutput)
}

func (o SecretOutput) DictionaryAsEnvs() pulumi.MapOutput {
	return o.ApplyT(func(v *Secret) pulumi.MapOutput { return v.DictionaryAsEnvs }).(pulumi.MapOutput)
}

func (o SecretOutput) Docker() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringPtrOutput { return v.Docker }).(pulumi.StringPtrOutput)
}

func (o SecretOutput) Ecr() SecretEcrPtrOutput {
	return o.ApplyT(func(v *Secret) SecretEcrPtrOutput { return v.Ecr }).(SecretEcrPtrOutput)
}

func (o SecretOutput) Gcp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringPtrOutput { return v.Gcp }).(pulumi.StringPtrOutput)
}

func (o SecretOutput) Keypair() SecretKeypairPtrOutput {
	return o.ApplyT(func(v *Secret) SecretKeypairPtrOutput { return v.Keypair }).(SecretKeypairPtrOutput)
}

func (o SecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SecretOutput) NatsAccount() SecretNatsAccountPtrOutput {
	return o.ApplyT(func(v *Secret) SecretNatsAccountPtrOutput { return v.NatsAccount }).(SecretNatsAccountPtrOutput)
}

func (o SecretOutput) Opaque() SecretOpaquePtrOutput {
	return o.ApplyT(func(v *Secret) SecretOpaquePtrOutput { return v.Opaque }).(SecretOpaquePtrOutput)
}

func (o SecretOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

func (o SecretOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o SecretOutput) Tls() SecretTlsPtrOutput {
	return o.ApplyT(func(v *Secret) SecretTlsPtrOutput { return v.Tls }).(SecretTlsPtrOutput)
}

func (o SecretOutput) Userpass() SecretUserpassPtrOutput {
	return o.ApplyT(func(v *Secret) SecretUserpassPtrOutput { return v.Userpass }).(SecretUserpassPtrOutput)
}

type SecretArrayOutput struct{ *pulumi.OutputState }

func (SecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Secret)(nil)).Elem()
}

func (o SecretArrayOutput) ToSecretArrayOutput() SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Secret] {
	return pulumix.Output[[]*Secret]{
		OutputState: o.OutputState,
	}
}

func (o SecretArrayOutput) Index(i pulumi.IntInput) SecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Secret {
		return vs[0].([]*Secret)[vs[1].(int)]
	}).(SecretOutput)
}

type SecretMapOutput struct{ *pulumi.OutputState }

func (SecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Secret)(nil)).Elem()
}

func (o SecretMapOutput) ToSecretMapOutput() SecretMapOutput {
	return o
}

func (o SecretMapOutput) ToSecretMapOutputWithContext(ctx context.Context) SecretMapOutput {
	return o
}

func (o SecretMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Secret] {
	return pulumix.Output[map[string]*Secret]{
		OutputState: o.OutputState,
	}
}

func (o SecretMapOutput) MapIndex(k pulumi.StringInput) SecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Secret {
		return vs[0].(map[string]*Secret)[vs[1].(string)]
	}).(SecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretInput)(nil)).Elem(), &Secret{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretArrayInput)(nil)).Elem(), SecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretMapInput)(nil)).Elem(), SecretMap{})
	pulumi.RegisterOutputType(SecretOutput{})
	pulumi.RegisterOutputType(SecretArrayOutput{})
	pulumi.RegisterOutputType(SecretMapOutput{})
}
