// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cpln

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln/internal"
)

type OrgTracing struct {
	pulumi.CustomResourceState

	ControlplaneTracing OrgTracingControlplaneTracingPtrOutput `pulumi:"controlplaneTracing"`
	CplnId              pulumi.StringOutput                    `pulumi:"cplnId"`
	Description         pulumi.StringOutput                    `pulumi:"description"`
	LightstepTracing    OrgTracingLightstepTracingPtrOutput    `pulumi:"lightstepTracing"`
	Name                pulumi.StringOutput                    `pulumi:"name"`
	OtelTracing         OrgTracingOtelTracingPtrOutput         `pulumi:"otelTracing"`
	Tags                pulumi.StringMapOutput                 `pulumi:"tags"`
}

// NewOrgTracing registers a new resource with the given unique name, arguments, and options.
func NewOrgTracing(ctx *pulumi.Context,
	name string, args *OrgTracingArgs, opts ...pulumi.ResourceOption) (*OrgTracing, error) {
	if args == nil {
		args = &OrgTracingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrgTracing
	err := ctx.RegisterResource("cpln:index/orgTracing:OrgTracing", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgTracing gets an existing OrgTracing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgTracing(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgTracingState, opts ...pulumi.ResourceOption) (*OrgTracing, error) {
	var resource OrgTracing
	err := ctx.ReadResource("cpln:index/orgTracing:OrgTracing", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgTracing resources.
type orgTracingState struct {
	ControlplaneTracing *OrgTracingControlplaneTracing `pulumi:"controlplaneTracing"`
	CplnId              *string                        `pulumi:"cplnId"`
	Description         *string                        `pulumi:"description"`
	LightstepTracing    *OrgTracingLightstepTracing    `pulumi:"lightstepTracing"`
	Name                *string                        `pulumi:"name"`
	OtelTracing         *OrgTracingOtelTracing         `pulumi:"otelTracing"`
	Tags                map[string]string              `pulumi:"tags"`
}

type OrgTracingState struct {
	ControlplaneTracing OrgTracingControlplaneTracingPtrInput
	CplnId              pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	LightstepTracing    OrgTracingLightstepTracingPtrInput
	Name                pulumi.StringPtrInput
	OtelTracing         OrgTracingOtelTracingPtrInput
	Tags                pulumi.StringMapInput
}

func (OrgTracingState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgTracingState)(nil)).Elem()
}

type orgTracingArgs struct {
	ControlplaneTracing *OrgTracingControlplaneTracing `pulumi:"controlplaneTracing"`
	LightstepTracing    *OrgTracingLightstepTracing    `pulumi:"lightstepTracing"`
	OtelTracing         *OrgTracingOtelTracing         `pulumi:"otelTracing"`
}

// The set of arguments for constructing a OrgTracing resource.
type OrgTracingArgs struct {
	ControlplaneTracing OrgTracingControlplaneTracingPtrInput
	LightstepTracing    OrgTracingLightstepTracingPtrInput
	OtelTracing         OrgTracingOtelTracingPtrInput
}

func (OrgTracingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgTracingArgs)(nil)).Elem()
}

type OrgTracingInput interface {
	pulumi.Input

	ToOrgTracingOutput() OrgTracingOutput
	ToOrgTracingOutputWithContext(ctx context.Context) OrgTracingOutput
}

func (*OrgTracing) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgTracing)(nil)).Elem()
}

func (i *OrgTracing) ToOrgTracingOutput() OrgTracingOutput {
	return i.ToOrgTracingOutputWithContext(context.Background())
}

func (i *OrgTracing) ToOrgTracingOutputWithContext(ctx context.Context) OrgTracingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgTracingOutput)
}

func (i *OrgTracing) ToOutput(ctx context.Context) pulumix.Output[*OrgTracing] {
	return pulumix.Output[*OrgTracing]{
		OutputState: i.ToOrgTracingOutputWithContext(ctx).OutputState,
	}
}

// OrgTracingArrayInput is an input type that accepts OrgTracingArray and OrgTracingArrayOutput values.
// You can construct a concrete instance of `OrgTracingArrayInput` via:
//
//	OrgTracingArray{ OrgTracingArgs{...} }
type OrgTracingArrayInput interface {
	pulumi.Input

	ToOrgTracingArrayOutput() OrgTracingArrayOutput
	ToOrgTracingArrayOutputWithContext(context.Context) OrgTracingArrayOutput
}

type OrgTracingArray []OrgTracingInput

func (OrgTracingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgTracing)(nil)).Elem()
}

func (i OrgTracingArray) ToOrgTracingArrayOutput() OrgTracingArrayOutput {
	return i.ToOrgTracingArrayOutputWithContext(context.Background())
}

func (i OrgTracingArray) ToOrgTracingArrayOutputWithContext(ctx context.Context) OrgTracingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgTracingArrayOutput)
}

func (i OrgTracingArray) ToOutput(ctx context.Context) pulumix.Output[[]*OrgTracing] {
	return pulumix.Output[[]*OrgTracing]{
		OutputState: i.ToOrgTracingArrayOutputWithContext(ctx).OutputState,
	}
}

// OrgTracingMapInput is an input type that accepts OrgTracingMap and OrgTracingMapOutput values.
// You can construct a concrete instance of `OrgTracingMapInput` via:
//
//	OrgTracingMap{ "key": OrgTracingArgs{...} }
type OrgTracingMapInput interface {
	pulumi.Input

	ToOrgTracingMapOutput() OrgTracingMapOutput
	ToOrgTracingMapOutputWithContext(context.Context) OrgTracingMapOutput
}

type OrgTracingMap map[string]OrgTracingInput

func (OrgTracingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgTracing)(nil)).Elem()
}

func (i OrgTracingMap) ToOrgTracingMapOutput() OrgTracingMapOutput {
	return i.ToOrgTracingMapOutputWithContext(context.Background())
}

func (i OrgTracingMap) ToOrgTracingMapOutputWithContext(ctx context.Context) OrgTracingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgTracingMapOutput)
}

func (i OrgTracingMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*OrgTracing] {
	return pulumix.Output[map[string]*OrgTracing]{
		OutputState: i.ToOrgTracingMapOutputWithContext(ctx).OutputState,
	}
}

type OrgTracingOutput struct{ *pulumi.OutputState }

func (OrgTracingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgTracing)(nil)).Elem()
}

func (o OrgTracingOutput) ToOrgTracingOutput() OrgTracingOutput {
	return o
}

func (o OrgTracingOutput) ToOrgTracingOutputWithContext(ctx context.Context) OrgTracingOutput {
	return o
}

func (o OrgTracingOutput) ToOutput(ctx context.Context) pulumix.Output[*OrgTracing] {
	return pulumix.Output[*OrgTracing]{
		OutputState: o.OutputState,
	}
}

func (o OrgTracingOutput) ControlplaneTracing() OrgTracingControlplaneTracingPtrOutput {
	return o.ApplyT(func(v *OrgTracing) OrgTracingControlplaneTracingPtrOutput { return v.ControlplaneTracing }).(OrgTracingControlplaneTracingPtrOutput)
}

func (o OrgTracingOutput) CplnId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgTracing) pulumi.StringOutput { return v.CplnId }).(pulumi.StringOutput)
}

func (o OrgTracingOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgTracing) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o OrgTracingOutput) LightstepTracing() OrgTracingLightstepTracingPtrOutput {
	return o.ApplyT(func(v *OrgTracing) OrgTracingLightstepTracingPtrOutput { return v.LightstepTracing }).(OrgTracingLightstepTracingPtrOutput)
}

func (o OrgTracingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgTracing) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o OrgTracingOutput) OtelTracing() OrgTracingOtelTracingPtrOutput {
	return o.ApplyT(func(v *OrgTracing) OrgTracingOtelTracingPtrOutput { return v.OtelTracing }).(OrgTracingOtelTracingPtrOutput)
}

func (o OrgTracingOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OrgTracing) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type OrgTracingArrayOutput struct{ *pulumi.OutputState }

func (OrgTracingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgTracing)(nil)).Elem()
}

func (o OrgTracingArrayOutput) ToOrgTracingArrayOutput() OrgTracingArrayOutput {
	return o
}

func (o OrgTracingArrayOutput) ToOrgTracingArrayOutputWithContext(ctx context.Context) OrgTracingArrayOutput {
	return o
}

func (o OrgTracingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*OrgTracing] {
	return pulumix.Output[[]*OrgTracing]{
		OutputState: o.OutputState,
	}
}

func (o OrgTracingArrayOutput) Index(i pulumi.IntInput) OrgTracingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgTracing {
		return vs[0].([]*OrgTracing)[vs[1].(int)]
	}).(OrgTracingOutput)
}

type OrgTracingMapOutput struct{ *pulumi.OutputState }

func (OrgTracingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgTracing)(nil)).Elem()
}

func (o OrgTracingMapOutput) ToOrgTracingMapOutput() OrgTracingMapOutput {
	return o
}

func (o OrgTracingMapOutput) ToOrgTracingMapOutputWithContext(ctx context.Context) OrgTracingMapOutput {
	return o
}

func (o OrgTracingMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*OrgTracing] {
	return pulumix.Output[map[string]*OrgTracing]{
		OutputState: o.OutputState,
	}
}

func (o OrgTracingMapOutput) MapIndex(k pulumi.StringInput) OrgTracingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgTracing {
		return vs[0].(map[string]*OrgTracing)[vs[1].(string)]
	}).(OrgTracingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgTracingInput)(nil)).Elem(), &OrgTracing{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgTracingArrayInput)(nil)).Elem(), OrgTracingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgTracingMapInput)(nil)).Elem(), OrgTracingMap{})
	pulumi.RegisterOutputType(OrgTracingOutput{})
	pulumi.RegisterOutputType(OrgTracingArrayOutput{})
	pulumi.RegisterOutputType(OrgTracingMapOutput{})
}
