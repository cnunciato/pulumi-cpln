// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cpln

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln/internal"
)

type Org struct {
	pulumi.CustomResourceState

	AccountId             pulumi.StringPtrOutput   `pulumi:"accountId"`
	AuthConfig            OrgAuthConfigPtrOutput   `pulumi:"authConfig"`
	CplnId                pulumi.StringOutput      `pulumi:"cplnId"`
	Description           pulumi.StringPtrOutput   `pulumi:"description"`
	Invitees              pulumi.StringArrayOutput `pulumi:"invitees"`
	Name                  pulumi.StringOutput      `pulumi:"name"`
	Observability         OrgObservabilityOutput   `pulumi:"observability"`
	SelfLink              pulumi.StringOutput      `pulumi:"selfLink"`
	SessionTimeoutSeconds pulumi.IntPtrOutput      `pulumi:"sessionTimeoutSeconds"`
	Statuses              OrgStatusArrayOutput     `pulumi:"statuses"`
	Tags                  pulumi.StringMapOutput   `pulumi:"tags"`
}

// NewOrg registers a new resource with the given unique name, arguments, and options.
func NewOrg(ctx *pulumi.Context,
	name string, args *OrgArgs, opts ...pulumi.ResourceOption) (*Org, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Observability == nil {
		return nil, errors.New("invalid value for required argument 'Observability'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Org
	err := ctx.RegisterResource("cpln:index/org:Org", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrg gets an existing Org resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrg(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgState, opts ...pulumi.ResourceOption) (*Org, error) {
	var resource Org
	err := ctx.ReadResource("cpln:index/org:Org", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Org resources.
type orgState struct {
	AccountId             *string           `pulumi:"accountId"`
	AuthConfig            *OrgAuthConfig    `pulumi:"authConfig"`
	CplnId                *string           `pulumi:"cplnId"`
	Description           *string           `pulumi:"description"`
	Invitees              []string          `pulumi:"invitees"`
	Name                  *string           `pulumi:"name"`
	Observability         *OrgObservability `pulumi:"observability"`
	SelfLink              *string           `pulumi:"selfLink"`
	SessionTimeoutSeconds *int              `pulumi:"sessionTimeoutSeconds"`
	Statuses              []OrgStatus       `pulumi:"statuses"`
	Tags                  map[string]string `pulumi:"tags"`
}

type OrgState struct {
	AccountId             pulumi.StringPtrInput
	AuthConfig            OrgAuthConfigPtrInput
	CplnId                pulumi.StringPtrInput
	Description           pulumi.StringPtrInput
	Invitees              pulumi.StringArrayInput
	Name                  pulumi.StringPtrInput
	Observability         OrgObservabilityPtrInput
	SelfLink              pulumi.StringPtrInput
	SessionTimeoutSeconds pulumi.IntPtrInput
	Statuses              OrgStatusArrayInput
	Tags                  pulumi.StringMapInput
}

func (OrgState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgState)(nil)).Elem()
}

type orgArgs struct {
	AccountId             *string           `pulumi:"accountId"`
	AuthConfig            *OrgAuthConfig    `pulumi:"authConfig"`
	Description           *string           `pulumi:"description"`
	Invitees              []string          `pulumi:"invitees"`
	Observability         OrgObservability  `pulumi:"observability"`
	SessionTimeoutSeconds *int              `pulumi:"sessionTimeoutSeconds"`
	Tags                  map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Org resource.
type OrgArgs struct {
	AccountId             pulumi.StringPtrInput
	AuthConfig            OrgAuthConfigPtrInput
	Description           pulumi.StringPtrInput
	Invitees              pulumi.StringArrayInput
	Observability         OrgObservabilityInput
	SessionTimeoutSeconds pulumi.IntPtrInput
	Tags                  pulumi.StringMapInput
}

func (OrgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgArgs)(nil)).Elem()
}

type OrgInput interface {
	pulumi.Input

	ToOrgOutput() OrgOutput
	ToOrgOutputWithContext(ctx context.Context) OrgOutput
}

func (*Org) ElementType() reflect.Type {
	return reflect.TypeOf((**Org)(nil)).Elem()
}

func (i *Org) ToOrgOutput() OrgOutput {
	return i.ToOrgOutputWithContext(context.Background())
}

func (i *Org) ToOrgOutputWithContext(ctx context.Context) OrgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgOutput)
}

func (i *Org) ToOutput(ctx context.Context) pulumix.Output[*Org] {
	return pulumix.Output[*Org]{
		OutputState: i.ToOrgOutputWithContext(ctx).OutputState,
	}
}

// OrgArrayInput is an input type that accepts OrgArray and OrgArrayOutput values.
// You can construct a concrete instance of `OrgArrayInput` via:
//
//	OrgArray{ OrgArgs{...} }
type OrgArrayInput interface {
	pulumi.Input

	ToOrgArrayOutput() OrgArrayOutput
	ToOrgArrayOutputWithContext(context.Context) OrgArrayOutput
}

type OrgArray []OrgInput

func (OrgArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Org)(nil)).Elem()
}

func (i OrgArray) ToOrgArrayOutput() OrgArrayOutput {
	return i.ToOrgArrayOutputWithContext(context.Background())
}

func (i OrgArray) ToOrgArrayOutputWithContext(ctx context.Context) OrgArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgArrayOutput)
}

func (i OrgArray) ToOutput(ctx context.Context) pulumix.Output[[]*Org] {
	return pulumix.Output[[]*Org]{
		OutputState: i.ToOrgArrayOutputWithContext(ctx).OutputState,
	}
}

// OrgMapInput is an input type that accepts OrgMap and OrgMapOutput values.
// You can construct a concrete instance of `OrgMapInput` via:
//
//	OrgMap{ "key": OrgArgs{...} }
type OrgMapInput interface {
	pulumi.Input

	ToOrgMapOutput() OrgMapOutput
	ToOrgMapOutputWithContext(context.Context) OrgMapOutput
}

type OrgMap map[string]OrgInput

func (OrgMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Org)(nil)).Elem()
}

func (i OrgMap) ToOrgMapOutput() OrgMapOutput {
	return i.ToOrgMapOutputWithContext(context.Background())
}

func (i OrgMap) ToOrgMapOutputWithContext(ctx context.Context) OrgMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgMapOutput)
}

func (i OrgMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Org] {
	return pulumix.Output[map[string]*Org]{
		OutputState: i.ToOrgMapOutputWithContext(ctx).OutputState,
	}
}

type OrgOutput struct{ *pulumi.OutputState }

func (OrgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Org)(nil)).Elem()
}

func (o OrgOutput) ToOrgOutput() OrgOutput {
	return o
}

func (o OrgOutput) ToOrgOutputWithContext(ctx context.Context) OrgOutput {
	return o
}

func (o OrgOutput) ToOutput(ctx context.Context) pulumix.Output[*Org] {
	return pulumix.Output[*Org]{
		OutputState: o.OutputState,
	}
}

func (o OrgOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Org) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

func (o OrgOutput) AuthConfig() OrgAuthConfigPtrOutput {
	return o.ApplyT(func(v *Org) OrgAuthConfigPtrOutput { return v.AuthConfig }).(OrgAuthConfigPtrOutput)
}

func (o OrgOutput) CplnId() pulumi.StringOutput {
	return o.ApplyT(func(v *Org) pulumi.StringOutput { return v.CplnId }).(pulumi.StringOutput)
}

func (o OrgOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Org) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o OrgOutput) Invitees() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Org) pulumi.StringArrayOutput { return v.Invitees }).(pulumi.StringArrayOutput)
}

func (o OrgOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Org) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o OrgOutput) Observability() OrgObservabilityOutput {
	return o.ApplyT(func(v *Org) OrgObservabilityOutput { return v.Observability }).(OrgObservabilityOutput)
}

func (o OrgOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Org) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

func (o OrgOutput) SessionTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Org) pulumi.IntPtrOutput { return v.SessionTimeoutSeconds }).(pulumi.IntPtrOutput)
}

func (o OrgOutput) Statuses() OrgStatusArrayOutput {
	return o.ApplyT(func(v *Org) OrgStatusArrayOutput { return v.Statuses }).(OrgStatusArrayOutput)
}

func (o OrgOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Org) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type OrgArrayOutput struct{ *pulumi.OutputState }

func (OrgArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Org)(nil)).Elem()
}

func (o OrgArrayOutput) ToOrgArrayOutput() OrgArrayOutput {
	return o
}

func (o OrgArrayOutput) ToOrgArrayOutputWithContext(ctx context.Context) OrgArrayOutput {
	return o
}

func (o OrgArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Org] {
	return pulumix.Output[[]*Org]{
		OutputState: o.OutputState,
	}
}

func (o OrgArrayOutput) Index(i pulumi.IntInput) OrgOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Org {
		return vs[0].([]*Org)[vs[1].(int)]
	}).(OrgOutput)
}

type OrgMapOutput struct{ *pulumi.OutputState }

func (OrgMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Org)(nil)).Elem()
}

func (o OrgMapOutput) ToOrgMapOutput() OrgMapOutput {
	return o
}

func (o OrgMapOutput) ToOrgMapOutputWithContext(ctx context.Context) OrgMapOutput {
	return o
}

func (o OrgMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Org] {
	return pulumix.Output[map[string]*Org]{
		OutputState: o.OutputState,
	}
}

func (o OrgMapOutput) MapIndex(k pulumi.StringInput) OrgOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Org {
		return vs[0].(map[string]*Org)[vs[1].(string)]
	}).(OrgOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgInput)(nil)).Elem(), &Org{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgArrayInput)(nil)).Elem(), OrgArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgMapInput)(nil)).Elem(), OrgMap{})
	pulumi.RegisterOutputType(OrgOutput{})
	pulumi.RegisterOutputType(OrgArrayOutput{})
	pulumi.RegisterOutputType(OrgMapOutput{})
}
