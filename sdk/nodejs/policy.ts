// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cpln:index/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    public readonly bindings!: pulumi.Output<outputs.PolicyBinding[] | undefined>;
    public /*out*/ readonly cplnId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly gvc!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly origin!: pulumi.Output<string>;
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly target!: pulumi.Output<string | undefined>;
    public readonly targetKind!: pulumi.Output<string>;
    public readonly targetLinks!: pulumi.Output<string[] | undefined>;
    public readonly targetQuery!: pulumi.Output<outputs.PolicyTargetQuery | undefined>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["bindings"] = state ? state.bindings : undefined;
            resourceInputs["cplnId"] = state ? state.cplnId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["gvc"] = state ? state.gvc : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["origin"] = state ? state.origin : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["targetKind"] = state ? state.targetKind : undefined;
            resourceInputs["targetLinks"] = state ? state.targetLinks : undefined;
            resourceInputs["targetQuery"] = state ? state.targetQuery : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if ((!args || args.targetKind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetKind'");
            }
            resourceInputs["bindings"] = args ? args.bindings : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gvc"] = args ? args.gvc : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["origin"] = args ? args.origin : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["targetKind"] = args ? args.targetKind : undefined;
            resourceInputs["targetLinks"] = args ? args.targetLinks : undefined;
            resourceInputs["targetQuery"] = args ? args.targetQuery : undefined;
            resourceInputs["cplnId"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    bindings?: pulumi.Input<pulumi.Input<inputs.PolicyBinding>[]>;
    cplnId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    gvc?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    selfLink?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    target?: pulumi.Input<string>;
    targetKind?: pulumi.Input<string>;
    targetLinks?: pulumi.Input<pulumi.Input<string>[]>;
    targetQuery?: pulumi.Input<inputs.PolicyTargetQuery>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    bindings?: pulumi.Input<pulumi.Input<inputs.PolicyBinding>[]>;
    description?: pulumi.Input<string>;
    gvc?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    target?: pulumi.Input<string>;
    targetKind: pulumi.Input<string>;
    targetLinks?: pulumi.Input<pulumi.Input<string>[]>;
    targetQuery?: pulumi.Input<inputs.PolicyTargetQuery>;
}
